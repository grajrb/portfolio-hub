name: Deploy to Vercel

on:
  push:
    # Deploy on every branch push. main -> production, others -> preview.
    branches: [ "**" ]
  pull_request:
    branches: [ main ]

concurrency:
  group: vercel-deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    name: Deploy to Vercel (${{ github.ref_name }})
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          # Pin to Node 20.19.0 to satisfy engines (vite requires ^20.19.0 || >=22.12.0)
          node-version: '20.19.0'

      - name: Install dependencies
        # Use `npm install` to avoid CI failing when lockfile is out-of-sync.
        # Recommended: regenerate package-lock.json locally with Node 20 and then switch this back to `npm ci`.
        run: npm install

      - name: Build
        run: npm run build

      # Deploy to Vercel using community action. This requires the following repository secrets:
      # - VERCEL_TOKEN       (create in Vercel dashboard: Settings -> Tokens -> Create)
      # - VERCEL_ORG_ID      (your Vercel organization id)
      # - VERCEL_PROJECT_ID  (your Vercel project id)
      # You can find Org and Project IDs in the Vercel dashboard (Project Settings -> General).
      - name: Deploy to Vercel
        id: vercel
        uses: amondnet/vercel-action@v20
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: .
          # Production only on main branch pushes; previews for others and PRs.
          prod: ${{ github.ref == 'refs/heads/main' && github.event_name == 'push' }}

      - name: Deployment URL
        if: steps.vercel.outputs.preview-url
        run: echo "Preview URL: ${{ steps.vercel.outputs.preview-url }}"

      - name: Done
        run: echo "Deployment finished (prod=${{ github.ref == 'refs/heads/main' && github.event_name == 'push' }})"

# Notes / Next steps:
# 1) Add the three secrets above in your GitHub repository Settings -> Secrets -> Actions.
# 2) To create VERCEL_TOKEN: go to https://vercel.com/account/tokens and create a new token.
# 3) To find VERCEL_ORG_ID and VERCEL_PROJECT_ID: open Vercel dashboard -> select your project -> Settings -> General -> scroll to 'Project ID' and 'Organization'.
# 4) IMPORTANT: GitHub will refuse pushes that create/update workflow files when you authenticate with an HTTPS PAT that lacks the 'workflow' scope. If your push fails, create a PAT with the 'workflow' scope, or push via SSH.